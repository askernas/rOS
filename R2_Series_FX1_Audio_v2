/*
RSeries Receiver I2C AudioFX1module for rMP3 
V008  28-Mar-2012
GNU GPL v3


To use this sketch, you need the following

rMP3 Rogue Robotics MP3 & SD Support
SD Card with SOUNDS 
Arduino IDE 1.0 with edited RogueMP3 & RogueSD Librarys


*/

#if defined(ARDUINO) && ARDUINO >= 100
  #include "Arduino.h"
  #else
   #include "WProgram.h"
#endif

#include <Wire.h>

#include <SoftwareSerial.h>   // this is to fix Arduino 0022 Core Stream
#include <RogueSD.h>         // Rogue Robotics SD File Support, which is on the rMP3
#include <RogueMP3.h>        // Rogue Robotics rMP3

#undef round
int x, y;

long loopCount = 0;
long twitchTime = 0;


//  rMP3 Serial
SoftwareSerial rmp3_serial(6, 7);
RogueMP3 rmp3(rmp3_serial);
RogueSD filecommands(rmp3_serial);

// variables for Sounds on SD
int numberOfSounds;
int lastSound;
char path[96];
char soundFile[96];
int soundNum;
char soundNum_str[3]; // supports up to 99 files in FX1/SSSSS/ folders
int randomSoundPlay; // randomness of SoundPlay... not what you think

boolean StealthMode = false;
boolean PowerOff = false;

// mood level ranges from 0-99. He always starts at 50, and will sink in ood for every timeout received when noone
// interacts with him. Every thing triggered will boost his mode by +1. This means it takes 80 things to interact 
// with him in order to make him happy. He is a cranky droi

#define MOODHAPPY 1
#define MOODATTN 2
#define MOODNEUTRAL 3
#define MOODSAD 4
#define MOODANGRY 5

#define MOODRANDOM 5 // you can max increase or decrease with 5, on every Twitch.

char moodlevel = 50;
int moodchange;
byte moodrandom;
boolean playedSound = false;

//const int leiaShrt = 5328; //length of short leia message
//const int leiaLong = 36545; // length of long leia message

const char *directory = "/FX1";

//Setup Sound Folder Strings
const char ALARM[20] = "/FX1/ALARM/ALARM"; 
int ALARM_FN = 11; // Number of files in folder

const char HAPPY[17] = "/FX1/HAPPY/HAPPY";
int HAPPY_FN = 18; // Number of files in folder 

const char ANGRY[25] = "/FX1/ANGRY/ANGRY";
int ANGRY_FN = 38; // Number of files in folder 

const char SAD[20] = "/FX1/SAD/SAD";
int SAD_FN = 16; // Number of files in folder 

const char ATTN[20] = "/FX1/ATTN/ATTN";
int ATTN_FN = 42; // Number of files in folder 

const char NEUTRAL[21] = "/FX1/NEUTRAL/NEUTRAL";
int NEUTRAL_FN = 55; // Number of files in folder 

const char HUM[20] = "/FX1/HUM/HUM";
int HUM_FN = 25; // Number of files in folder 

const char MISC[20] = "/FX1/MISC/MISC";
int MISC_FN = 36; // Number of files in folder 

const char OOH[20] = "/FX1/OOH/OOH";
int OOH_FN = 7; // Number of files in folder 

String OTHER = "/FX1/OTHER/";

const char PROC[20] = "/FX1/PROC/PROC";
int PROC_FN = 15; // Number of files in folder 

const char RAZZ[20] = "/FX1/RAZZ/RAZZ";
int RAZZ_FN = 23; // Number of files in folder 

const char SCREAM[25] = "/FX1/SCREAM/SCREAM";
int SCREAM_FN = 4; // Number of files in folder 

const char SENT[25] = "/FX1/SENT/SENT";
int SENT_FN = 20; // Number of files in folder 

const char  WHIST[20] = "/FX1/WHIST/WHIST";
int WHIST_FN = 25; // Number of files in folder 

const char  AHSOKA[25] = "/PERSONS/AHSOKA/AHSOKA";
int AHSOKA_FN = 4; // Number of files in folder 

const char  ANAKIN[25] = "/PERSONS/ANAKIN/ANAKIN";
int ANAKIN_FN = 3; // Number of files in folder 

const char  JABBA[25] = "/PERSONS/JABBA/JABBA";
int JABBA_FN = 6; // Number of files in folder 

const char  JAWA[20] = "/PERSONS/JAWA/JAWA";
int JAWA_FN = 7; // Number of files in folder 

const char  YODA[20] = "/PERSONS/YODA/YODA";
int YODA_FN = 3; // Number of files in folder 

const char  C3PO[20] = "/PERSONS/C3PO/C3PO";
int C3PO_FN = 15; // Number of files in folder 

const char  CHEWIE[25] = "/PERSONS/CHEWIE/CHEWIE";
int CHEWIE_FN = 7; // Number of files in folder 

const char  HAN[20] = "/PERSONS/HAN/HAN";
int HAN_FN = 4; // Number of files in folder 

const char  LEIA[20] = "/PERSONS/LEIA/LEIA";
int LEIA_FN = 6; // Number of files in folder 

const char  LUKE[20] = "/PERSONS/LUKE/LUKE";
int LUKE_FN = 3; // Number of files in folder 

const char  OBIWAN[25] = "/PERSONS/OBIWAN/OBIWAN";
int OBIWAN_FN = 9; // Number of files in folder 

const char  VADER[25] = "/PERSONS/VADER/VADER";
int VADER_FN = 4; // Number of files in folder 



void setup() { 
// Setup rMP3 Serial
  Serial.begin(9600); // DEBUG CODE
  rmp3_serial.begin(9600);
  rmp3.sync();
  rmp3.stop();
  rmp3.setvolume(0);
  
// Setup rSD access
  filecommands.sync();
 
// play a initializing start sound
  rmp3.playfile("/FX1/OTHER/MACSTART.mp3");
delay(2500);

pinMode(10, OUTPUT);
pinMode(11, OUTPUT);
digitalWrite(10, LOW);
digitalWrite(11, LOW);


// mix up our random number generator
randomSeed(analogRead(0));

twitchTime = 2000;   // Initial time 

  
  Wire.begin(4);                // join i2c bus with address #4
  Wire.onReceive(receiveEvent); // register event


}

void loop()
{
  loopCount++;

  if (x == 65) {StealthMode=!StealthMode;}
  if (x == 81) {PowerOff=!PowerOff;}
  
  if (!StealthMode || !PowerOff) {
      
    if (x != 0) {playedSound = true;}
    if (x == 1) {playHAPPY(); x=0; loopCount = 0;}  
    if (x == 2) {playANGRY(); x=0; loopCount = 0;}  
    if (x == 3) {playWHIST(); x=0; loopCount = 0;}  
    if (x == 4) {playPROC(); x=0; loopCount = 0;sendLogicFX(120);} 
    if (x == 5) {playHUM() ; x=0; loopCount = 0;}
    if (x == 6) {playSCREAM(); x=0; loopCount = 0;sendLogicFX(49);sendMysteryFX(5);}  
    if (x == 7) {rmp3.playfile("/FX1/OTHER/FAILURE.mp3"); x=0; loopCount = 0;sendLogicFX(35);}
    if (x == 8) {playRAZZ();  x=0; loopCount = 0;} 
    if (x == 9) {rmp3.playfile("/FX1/OTHER/WOLFWSTL.mp3");  x=0; loopCount = 0;sendMysteryFX(9);} 
    if (x == 10) {playOOH(); x=0; loopCount = 0;sendLogicFX(51);sendMysteryFX(9);}  
    if (x == 11) {playALARM(); x=0; loopCount = 0;sendLogicFX(72);sendMysteryFX(3);}
    if (x == 15) {playLEIASHORT(); x=0;loopCount = 0;sendLogicFX(70);}
    if (x == 16) {playLEIALONG(); x=0;loopCount = 0;}
    if (x == 17) {rmp3.playfile("/FX1/WHIST/WHIST13.mp3"); x=0; loopCount = 0;sendLogicFX(88);}
    if (x == 42) {playVADER(); x=0; loopCount = 0;}  
    if (x == 43) {playC3PO(); x=0; loopCount = 0;}  
    if (x == 45) {playLUKE(); x=0; loopCount = 0;}  
    if (x == 46) {playLEIA(); x=0; loopCount = 0;}  
    if (x == 47) {playHAN(); x=0; loopCount = 0;}  
    if (x == 48) {playOBIWAN(); x=0; loopCount = 0;}  
    if (x == 49) {playCHEWIE(); x=0; loopCount = 0;}  
    if (x == 54) {rmp3.playfile("/FX1/MUSIC/STARWARS.mp3"); x=0;loopCount = 0;sendLogicFX(21);}  
    if (x == 55) {rmp3.playfile("/FX1/MUSIC/MARCH.mp3"); x=0;loopCount = 0;Serial.print("Imperial March Playing");sendLogicFX(21);}  
    if (x == 56) {rmp3.playfile("/FX1/MUSIC/CANTINA.mp3"); x=0;loopCount = 0;sendLogicFX(21);}  
    if (x == 58) {rmp3.playfile("/FX1/MUSIC/DUELFATE.mp3"); x=0;loopCount = 0;sendLogicFX(21);}  
    if (x == 59) {rmp3.playfile("/FX1/MUSIC/SWDISCO.mp3"); x=0;loopCount = 0;sendLogicFX(21);}  
    if (x == 60) {rmp3.playfile("/FX1/MUSIC/SWREMIX.mp3"); x=0;loopCount = 0;sendLogicFX(21);}  
    if (x == 61) {rmp3.playfile("/FX1/MUSIC/CELLOWAR.mp3"); x=0;loopCount = 0;sendLogicFX(21);}  
    if (x == 62) {rmp3.playfile("/FX1/OTHER/CANTINA.mp3"); x=0;loopCount = 0;}    
    if (x == 71) {rmp3.playfile("/FX1/PROC/PROC1.mp3"); x=0; loopCount = 0;}
    if (x == 82) {playPATROL(); x=0; loopCount = 0;}    
    if (x == 101) {playRandom(); x=0; loopCount = 0;} // 101 = zButton on Nunchuck
    if (x == 102) {playRAZZ();  x=0; loopCount = 0;} // 102 = cButton on Nunchuck
    if (x == 103) {rmp3.playfile("/FX1/MUSIC/CANTINAS.mp3"); x=0; loopCount = 0;sendLogicFX(22);} //103 = zButton & cButton
    if (x == 254) {playAck(); x=0; loopCount = 0;}  
    if (x == 255) {rmp3.playfile("/FX1/OTHER/GROAN.mp3"); x=0; loopCount = 0;} // When connection is lost
  
  
  //  
//    Serial.println(x);         // print the integer DEBUG CODE
  //
  
    if (loopCount > twitchTime) {

        moodrandom = random(0, 1);
        if (moodrandom == 1) {
            moodlevel += random(0,MOODRANDOM);
        } else {
            moodlevel -= random(0,MOODRANDOM);
        }
       if (!playedSound) moodlevel--;
       if (moodlevel<0) moodlevel = 0;
       if (moodlevel>99) moodlevel = 99;
       loopCount = 0;       // reset loopCount
       playedSound = false;
       twitchTime = random (45,90) * 100;    // set the next twitchtime
       if (random (10) == 7) {
       if (rmp3.getplaybackstatus()!='P')
         playRandom();                            // call playPROC routine
        }
    }
//    delay(5);
  }
}

// receiveEvent function executes whenever data is received from master
// this function is registered as an event, see setup()

void receiveEvent(int howMany) {
    x = Wire.read();    // receive byte as an integer
//    Serial.println(x);         // print the integer - DEBUG CODE
}


void playRandom()                        // Randomly play random sound from sound folders... create a personality & attitude
{
     randomSoundPlay = random (1,8);    // Pick a number 1 - 7
     switch (randomSoundPlay) {
      case 1:
       //do something when randomSoundPlay equals 1
       playHUM();
       break;
      case 2:
       playMISC();
       break;
      case 3:
       playOOH();
       break;
      case 4:
       playPROC();
       break;
      case 5:
       playRAZZ();
       break;
      case 6:
       playSENT();
       break;
      case 7:
       playWHIST();
       break;
      case 8:
       playPATROL();
       break;
      case 9:
       playNEUTRAL();
       break;
      case 10:
      
       break;
      case 11:
      
       break;
      case 12:
      
       break;
      
      default: 
       // if nothing else matches, do the default
       // so we are going to do nothing... for that matter not even waste time
       break;
      }
}

void playHAPPY()
{
  soundNum = random (1, HAPPY_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, HAPPY);               // copy HUM char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}      

void playSAD()
{
  soundNum = random (1, SAD_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, SAD);               // copy HUM char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}

void playANGRY()
{
  soundNum = random (1, ANGRY_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, ANGRY);               // copy HUM char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}  

void playATTN()
{
  soundNum = random (1, ATTN_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, ATTN);               // copy HUM char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}      

void playNEUTRAL()
{
  soundNum = random (1, NEUTRAL_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, NEUTRAL);               // copy HUM char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}      

void playALARM()                        // Randomly play random ALARM sound from sound folders... R2 is not happy
{
       soundNum = random (1, ALARM_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, ALARM);              // copy ALARM char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playHUM()
{
  soundNum = random (1, HUM_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, HUM);               // copy HUM char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}      

void playMISC()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, MISC_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, MISC);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playOOH()
{
  soundNum = random (1, OOH_FN);    // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, OOH);               // copy OOH char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}

void playPROC()
{
  soundNum = random (1, PROC_FN);   // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, PROC);              // copy PROC char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}

void playRAZZ()
{
  soundNum = random (1, RAZZ_FN);   // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, RAZZ);              // copy RAZZ char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}  

void playSENT()
{
  soundNum = random (1, SENT_FN);   // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, SENT);              // copy SENT char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}

void playSCREAM()
{
  soundNum = random (1, SCREAM_FN);   // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, SCREAM);              // copy SENT char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);           // used to debug
  rmp3.playfile(path);
}

void playWHIST()
{
  soundNum = random (1, WHIST_FN);  // generate a random # from 1 to the number of files declared in that folder
  strcpy (path, WHIST);             // copy WHIST char variable, to path
  itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
  strcat (path, soundNum_str);      // add sound_str to path
  strcat (path, ".mp3");            // add .mp3 to path
  //Serial.println(path);            // used to debug
  rmp3.playfile(path);
}


void playAHSOKA()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, AHSOKA_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, AHSOKA);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playANAKIN()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, ANAKIN_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, ANAKIN);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playC3PO()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, C3PO_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, C3PO);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playCHEWIE()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, CHEWIE_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, CHEWIE);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playHAN()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, HAN_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, HAN);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playJABBA()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, JABBA_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, JABBA);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playJAWA()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, JAWA_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, JAWA);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playLEIA()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, LEIA_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, LEIA);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playLUKE()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, LUKE_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, LUKE);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playOBIWAN()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, OBIWAN_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, OBIWAN);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playVADER()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, VADER_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, VADER);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playYODA()                        // Randomly play random MISC sound from sound folders... create a little chatter.
{
       soundNum = random (1, YODA_FN);   // generate a random # from 1 to the number of files declared in that folder
       strcpy (path, YODA);              // copy MISC char variable, to path
       itoa(soundNum, soundNum_str, 10); // convert the random number integer to string and store it in sound_str
       strcat (path, soundNum_str);      // add sound_str to path
       strcat (path, ".mp3");            // add .mp3 to path
       //Serial.println(path);           // used to debug
       rmp3.playfile(path);
}

void playPATROL()                        // Play Patrol Sound.
{
       rmp3.playfile("/FX1/OTHER/PATROL1.mp3");
}

void playLEIASHORT() {
  rmp3.playfile("/FX1/OTHER/LEIASHRT.mp3");
}

void playLEIALONG() {
  rmp3.playfile("/FX1/OTHER/LEIALONG.mp3");
}

void playAck() {
    rmp3.playfile("/FX1/HUM/HUM19.mp3");
}

void sendLogicFX(int y) {
  Wire.beginTransmission(11);  // transmit to device #11 which is the Dome FX Teeces
  Wire.write(y);   // sends Trigger Event LSB 
  Wire.endTransmission();     // stop transmitting
}

void sendMysteryFX(int y) {
  Wire.beginTransmission(20); // Mystery Panel
  Wire.write(y);
  Wire.endTransmission();
}
