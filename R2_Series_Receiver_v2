/*
 * Astromech RSeries Receiver for the R2 Builders Club
 *
 * Creative Copyright v3 SA BY - 2012 Michael Erwin 
 *                               michael(dot)erwin(at)mac(dot)com
 *                               2013 Micke Askernäs
 *                               micke(at)askernas(dot)com 
 *
 * Code rewrite 2013 by Micke Askernäs
 * Branched Version
 * Second rewrite, October 2013
 *
 * RSeries Open Controller Project  http://code.google.com/p/rseries-open-control/
 * Requires Arduino 1.0 IDE
 *
 * Liberal use of code from the following: 
 * Tim Hirzel   http://www.growdown.com
 * Fabio Biondi http://www.fabiobiondi.com
 * Tod Kurt     http://todbot.com
 * Chad Philips http://www.windmeadow.com/node/42
 * Limor Fried  http://adafruit.com/
 * ArduPilot-Mega Development Team http://code.google.com/p/ardupilot-mega/
 *
 */

#define VERSION "0.4.1"
boolean TESTING = false;
// 0.4.1 - Removed all speed mappings. Receiver should be handled speeds, not having to calculate.
// 0.4.0 - Second rewrite (attempt 2)
// 0.3.1 - Added ramping for speed increase/decrease to avoid faceplanting.
// 0.3.0 - Complete rewrite of code more secure driving and better handling. Also added receiver reset.
/* 
 The goal of this sketch is to help develop a new wireless, touchscreen,
 R-Series Astromech Controller & Tranceiver system platform for the
 R2 Builders Club.
 
 Currently due to variable usage, we need more than 2048 bytes of SRAM.
 So we must use an Arduino MEGA 2560 or ATMEGA 2560 for the Transmitter
 
 Digi Xbee Series 2 & 2B PRO modules are FCC approved. Pro Modules are optional, but highly recommended.
  
 */

/*******************************************************************************************************/
/* Includes                                                                                            */
/*******************************************************************************************************/

#include <XBee.h>
#include <Wire.h>            //i2c communication
#include <VarSpeedServo.h>   // To enable ramping



/*******************************************************************************************************/
/* XBee Stuff                                                                                          */
/*******************************************************************************************************/

int xbeebps = 19200;
int xbeeTimeout=500;
XBee xbee = XBee();
XBeeResponse response = XBeeResponse();
ZBRxResponse rx = ZBRxResponse();
XBeeAddress64 addr64 = XBeeAddress64(0x0013a200, 0x40913dc6); // Destination (Controller) address

uint8_t payload[] = { '0', '0', '0', '0', '0', '0', '0' }; // Our XBee Payload of 7 values (txVCC, txVCA, txRSSI, flags=4)
uint8_t opCmd[] = { 'O','P'};
uint8_t dbCmd[] = { 'D','B'};

ZBTxRequest zbTx = ZBTxRequest(addr64, payload, sizeof(payload));
ZBTxStatusResponse txStatus = ZBTxStatusResponse();
byte xbAPIidResponse = 0x00;
AtCommandRequest atRequest = AtCommandRequest(opCmd);
AtCommandResponse atResponse = AtCommandResponse();




/*******************************************************************************************************/
/* Safe Mode Varaibles and settings                                                                    */
/*******************************************************************************************************/

boolean DisableAtStart = true; // Nothing will actually drive until an unlock code is made
int unLockCode = 25;           // The triggerEvent that will unlock the droid

int rxErrorCount = 0;
int loopCount=0;
int errorThreshhold = 5; // Amount of packages allowed to be lost before going in to safe mode.
// int rebootThreshhold = 20; // receiver will reboot when this value is reached.
boolean safeMode = false; // Will stop the droid when communication is lost.


/*******************************************************************************************************/
/* Booleans                                                                                            */
/*******************************************************************************************************/

// Hardware Config Options.
boolean AudioFX1module = true;     // Audio Sound FX.   I2C: 4
boolean AudioFX2module = true;     // Audio Drive FX.   I2C: 5
boolean ServoFX1module = false;    // Servo Module FX.  I2C: 6
boolean BodyLEDFX = true;          // Body Lighting FX. I2C: 10
boolean DomeLEDFX = true;          // Dome Lighting FX. I2C: 11

#define AudioFX1 4
#define AudioFX2 5
#define ServoFX1 6
#define BodyLED1 10
#define DomeLED1 11

// Triggers. Things that can be toggled on and off and we need to keep track of.
boolean Body_CPU = false;
boolean Dome_Open = false;
boolean Dome_LFS = false;
boolean Dome_Periscope = false;
boolean Dome_HP1 = false;
boolean Dome_HP2 = false;
boolean Dome_HP3 = false;
boolean Dome_PP1 = false;
boolean Dome_PP2 = false;
boolean Dome_PP3 = false;
boolean Dome_PP4 = false;
boolean Dome_Panel1 = false;
boolean Dome_Panel2 = false;
boolean Dome_Panel3 = false;
boolean Dome_Panel4 = false;
boolean Dome_Panel5 = false;
boolean Dome_Panel6 = false;
boolean Body_CBI = false;
boolean Body_Datapanel = false;
boolean Body_Door_L = false;
boolean Body_Door_R = false;
boolean Dome_Lock = false;
boolean Drive_Lock = false;
boolean StealthMode = false;
boolean RaceMode = false;
boolean PatrolMode = false;
boolean AltControl = false;
boolean FastMode = false;
boolean FunnyMode = false;
boolean PowerOff = false;
boolean AutoPilot = false;

//Other Booleans
boolean domerotation = false;
boolean driving = false;



/*******************************************************************************************************/
/* Variables                                                                                           */
/*******************************************************************************************************/

int analogVCCinput = 5; // RSeries Receiver default VCC input is A5
float R1 = 47000.0;     // >> resistance of R1 in ohms << the more accurate these values are
float R2 = 24000.0;     // >> resistance of R2 in ohms << the more accurate the measurement will be
float vout = 0.0;       // for voltage out measured analog input
float vcc = 0.0;
int VCCvalue = 0;          // used to hold the analog value coming out of the voltage divider
float vin = 0.0;        // voltage calulcated... since the divider allows for 15 volts
byte txVCC = 0;
byte txVCA = 0;
byte txRSSI = 0;

byte txSignature = 0;
byte txResponder = 0;

int telemetryThreshhold = 50; //How often should the system send telemetry?

int telemetryflags1 = 0; 
int telemetryflags2 = 0;
int telemetryflags3 = 0;
int telemetryflags4 = 0;

byte drive, turn, dome, cbut, zbut;

int triggerEvent;
byte triggerFX2item;



/*******************************************************************************************************/
/* Servo Config                                                                                        */
/*******************************************************************************************************/

VarSpeedServo chan1servo;       // create servo object to control a servo 
VarSpeedServo chan2servo;       // create servo object to control a servo
VarSpeedServo chan3servo;       // create servo object to control a servo 
//VarSpeedServo chan4servo;       // create servo object to control a servo 
//VarSpeedServo chan5servo;       // create servo object to control a servo 
//VarSpeedServo chan6servo;       // create servo object to control a servo 
//VarSpeedServo chan7servo;       // create servo object to control a servo 
//VarSpeedServo chan8servo;       // create servo object to control a servo
//VarSpeedServo chan9servo;       // create servo object to control a servo
//VarSpeedServo chan10servo;      // create servo object to control a servo

// Define which digital pins on the arduino are for servo data signals 
int servo1Pin = 2;    // Channel 1 - Left Right                turn
int servo2Pin = 3;    // Channel 2 - Forward & Reverse Speed   drive
int servo3Pin = 4;    // Channel 3 - Dome Rotation             dome
//int servo4Pin = 5;    // Channel 4 - CBI Door
//int servo5Pin = 7;    // Channel 5 - Datapanel Door
//int servo6Pin = 8;    // Channel 6 - Door Left
//int servo7Pin = 9;    // Channel 7 - Door Right
//int servo8Pin = 10;   // Channel 8
//int servo9Pin = 11;   // Channel 9
//int servo10Pin = 12;  // Channel 10

int turnCenter = 90;
int driveCenter = 90;
int domeCenter = 90;

int turnWidth = 6;  
int driveWidth = 4;
int domeWidth = 4;

int driveSoundWidth = 10;
int domeSoundWidth = 15;

int driveThreshold = 40; // for speed ramping
int driveSlowMove = 18;  // for speed ramping
int driveFastMove = 40;  // for speed ramping
int driveSpeed;
int domeSpeed = 20;
int lastDriveVal = 90;
//int lastDomeVal = 90;



/*******************************************************************************************************/
/* Setup                                                                                               */
/*******************************************************************************************************/

void setup() {  

    xbee.setSerial(Serial1);                     // Setup xbee to use Serial1
    xbee.begin(xbeebps);                         // Setup xbee to begin 19200
    Wire.begin();                                // Start I2C Bus as Master    
    Serial.begin(9600);                          // DEBUG CODE

    //  Serial.println("Starting up debug...");        // DEBUG CODE

    pinMode(analogVCCinput, INPUT);

    chan1servo.attach(servo1Pin);  // create servo object to control a servo 
    chan2servo.attach(servo2Pin);  // create servo object to control a servo 
    chan3servo.attach(servo3Pin);  // create servo object to control a servo   
    //  chan4servo.attach(servo4Pin);  // create servo object to control a servo 
    //  chan5servo.attach(servo5Pin);  // create servo object to control a servo 
    //  chan6servo.attach(servo6Pin);  // create servo object to control a servo 
    //  chan7servo.attach(servo7Pin);  // create servo object to control a servo 
    //  chan8servo.attach(servo8Pin);  // create servo object to control a servo 
    //  chan9servo.attach(servo9Pin);  // create servo object to control a servo 
    //  chan10servo.attach(servo10Pin);// create servo object to control a servo 

    //sending out stop values on drive and dome servos during setup
    chan1servo.write(turnCenter);
    chan2servo.write(driveCenter);
    chan3servo.write(domeCenter);
}



/*******************************************************************************************************/
/* loop()                                                                                              */
/*******************************************************************************************************/

void loop() {  
    while (rxErrorCount<errorThreshhold) {
        if (xbee.readPacket(xbeeTimeout)) {
            loopCount++;

            if (loopCount>telemetryThreshhold) {
                sendTelemetry();
                loopCount=0;
            }
            //      Serial.println("Xbee Packets Read");
            xbee.getResponse().getZBRxResponse(rx);
            rxErrorCount = 0;    
            safeMode=false;     


            if (rx.getData()[0]!=0 && rx.getData()[1]!=0 && rx.getData()[2]!=0) {
                int turn  = rx.getData()[0];
                int drive = rx.getData()[1];
                int dome  = rx.getData()[2];
            } 
            else {
                turn = turnCenter;
                drive = driveCenter;
                dome = domeCenter;
            }

            triggerEvent = rx.getData()[3];// TriggerEvent NOTE: Telemetry from controller REDUCED!

            // Add a check if the droid is disabled at start. If so, do nothing more. Ever. Until the code has been received.

            if (DisableAtStart) {
                if (triggerEvent == unLockCode) DisableAtStart = false;
            } 
            else {


                // Special Events:

                switch (triggerEvent) {
                case 14: // *Extend/Retract CPU Arm
                    Body_CPU=!Body_CPU;
                    setFlag(Dome_Lock, telemetryflags2, 2);
                    break;
                case 17: // Perform R2 Wiggle
                    r2Wiggle();
                    break;
                case 19: // *Open/Close All Dome Hatches
                    Dome_Open=!Dome_Open;
                    setFlag(Dome_Lock, telemetryflags3, 7);
                    break;
                case 23: // *Extend/Retract Life Form Scanner
                    Dome_LFS=!Dome_LFS;
                    setFlag(Dome_Lock, telemetryflags4, 0);
                    break;
                case 24: // *Extend/Retract Periscope
                    Dome_Periscope=!Dome_Periscope;
                    setFlag(Dome_Lock, telemetryflags4, 1);
                    break;
                case 25: // *Activate Holo Projector 1
                    Dome_HP1=!Dome_HP1;
                    setFlag(Dome_Lock, telemetryflags3, 0);
                    break;
                case 26: // *Activate Holo Projector 2
                    Dome_HP2=!Dome_HP2;
                    setFlag(Dome_Lock, telemetryflags3, 1);
                    break;
                case 27: // *Activate Holo Projector 3
                    Dome_HP3=!Dome_HP3;
                    setFlag(Dome_Lock, telemetryflags3, 2);
                    break;
                case 28: // *Open/Close Dome Pie Panel 1
                    Dome_PP1=!Dome_PP1;
                    setFlag(Dome_Lock, telemetryflags3, 3);
                    break;
                case 29: // *Open/Close Dome Pie Panel 2
                    Dome_PP2=!Dome_PP2;
                    setFlag(Dome_Lock, telemetryflags3, 4);
                    break;
                case 30: // *Open/Close Dome Pie Panel 3
                    Dome_PP3=!Dome_PP3;
                    setFlag(Dome_Lock, telemetryflags3, 5);
                    break;
                case 31: // *Open/Close Dome Pie Panel 4
                    Dome_PP4=!Dome_PP4;
                    setFlag(Dome_Lock, telemetryflags3, 6);
                    break;
                case 32: // *Open/Close Dome Side Panel 1
                    Dome_Panel1=!Dome_Panel1;
                    setFlag(Dome_Lock, telemetryflags4, 2);
                    break;
                case 33:// *Open/Close Dome Side Panel 2
                    Dome_Panel2=!Dome_Panel2;
                    setFlag(Dome_Lock, telemetryflags4, 3);
                    break;
                case 34:// *Open/Close Dome Side Panel 3
                    Dome_Panel3=!Dome_Panel3;
                    setFlag(Dome_Lock, telemetryflags4, 4);
                    break;
                case 35:// *Open/Close Dome Side Panel 4
                    Dome_Panel4=!Dome_Panel4;
                    setFlag(Dome_Lock, telemetryflags4, 5);
                    break;
                case 36:// *Open/Close Dome Side Panel 5
                    Dome_Panel5=!Dome_Panel5;
                    setFlag(Dome_Lock, telemetryflags4, 6);
                    break;
                case 37:// *Open/Close Dome Side Panel 6
                    Dome_Panel6=!Dome_Panel6;
                    setFlag(Dome_Lock, telemetryflags4, 7);
                    break;
                case 38: // *Open/Close CBI Door
                    Body_CBI=!Body_CBI;
                    setFlag(Dome_Lock, telemetryflags2, 3);
                    break;
                case 39: // *Open/Close Datapanel Door
                    Body_Datapanel=!Body_Datapanel;
                    setFlag(Dome_Lock, telemetryflags2, 4);
                    break;
                case 40: // *Open/Close Left Body Door
                    Body_Door_L=!Body_Door_L;
                    setFlag(Dome_Lock, telemetryflags2, 5);
                    break;
                case 41: // *Open/Close Right Body Door
                    Body_Door_R=!Body_Door_R;
                    setFlag(Dome_Lock, telemetryflags2, 6);
                    break;
                case 63: // *Lock the Dome
                    Dome_Lock=!Dome_Lock;
                    setFlag(Dome_Lock, telemetryflags1, 0);
                    break;
                case 64: // *Lock Drive
                    Drive_Lock=!Drive_Lock;
                    setFlag(Drive_Lock, telemetryflags1, 1);
                    break;
                case 65: // *Go into Stealth Mode (No Sounds)
                    StealthMode=!StealthMode;
                    setFlag(StealthMode, telemetryflags1, 2);
                    break;
                case 66: // *Race Mode On/Off
                    RaceMode=!RaceMode;
                    setFlag(RaceMode, telemetryflags1, 3);
                    break;
                case 67: // *Patrol Mode On/Off
                    PatrolMode=!PatrolMode;
                    setFlag(PatrolMode, telemetryflags1, 4);
                    break;
                case 68: // Switch to alternative control method
                    AltControl=!AltControl;
                    setFlag(AltControl, telemetryflags1, 5);
                    break;
                case 69: // Fast Speed On/Off
                    FastMode=!FastMode;
                    setFlag(FastMode, telemetryflags1, 6);
                    break;
                case 70: // *Funny Mode On/Off
                    FunnyMode=!FunnyMode;
                    setFlag(Dome_Lock, telemetryflags2, 0);
                    break;
                case 71: // *AutoPilot On/Off
                    AutoPilot=!AutoPilot;
                    setFlag(PowerOff, telemetryflags1, 7);
                    break;
                case 81: // Turn off all LED's and drive and sound.
                    PowerOff=!PowerOff;
                    setFlag(Dome_Lock, telemetryflags2, 1);
                    break;
                }


                if ((turn>(turnCenter-(turnWidth/2))) && (turn<(turnCenter+(turnWidth/2)))) turn=turnCenter;
                if ((drive>(driveCenter-(driveWidth/2))) && (drive<(driveCenter+(driveWidth/2)))) drive=driveCenter;
                if ((dome>(domeCenter-(domeWidth/2))) && (dome<(domeCenter+(domeWidth/2)))) dome=domeCenter;


                if (Drive_Lock || PowerOff) { // Drive Control
                    drive=driveCenter;
                    turn=turnCenter;
                } 
                else {
                    if (drive == driveCenter) {// STANDING STILL
                        if (AudioFX2module==true && StealthMode==false) {
                            if (driving==true) {
                                triggerFX2item = 207; // Drive stop FX
                                driving = false;
                                sendAudioFX2();
                            }
                        }
                    }  
                    else if ((drive<=(driveCenter-(driveSoundWidth/2))) || (drive >=(driveCenter+(driveSoundWidth/2)))) { // SOUND STARTING
                        if (AudioFX2module==true && StealthMode==false) {
                            if (driving==false) {
                                triggerFX2item = 206;
                                driving = true;
                                sendAudioFX2();
                            }
                        }
                    }
                }

                if (Dome_Lock || PowerOff) { // Dome Control
                    if (dome == domeCenter) { // NEUTRAL, NO SOUND
                        if (AudioFX2module==true && StealthMode==false) {
                            if (domerotation==true) {
                                triggerFX2item = 202; // Dome rotation stop FX
                                domerotation = false;
                                sendAudioFX2();
                                delay(200);
                            }
                        }
                        dome = domeCenter;
                    }
                    if ((dome < (domeCenter - (domeSoundWidth/2))) || (dome > (domeCenter + (domeSoundWidth/2) ))) { // Sound when turning 
                        if (AudioFX2module==true && StealthMode==false) {
                            if (domerotation==false) {
                                triggerFX2item = 200;
                                domerotation = true;
                                sendAudioFX2();
                            }
                        }
                    } 
                } 

                if (valueDiff(drive, lastDriveVal)>driveThreshold) {
                    driveSpeed = driveFastMove;
                } 
                else {
                    driveSpeed = driveSlowMove;
                }

                // only place where the servos actually gets updated with anything except 90      
                chan1servo.write(turn);      // Update Channel 1 servo 
                chan2servo.slowmove(drive, driveSpeed);
                chan3servo.slowmove(dome, domeSpeed);      // Update Channel 3 servo  
                // so this is where we check for things like       

                if (TESTING) printDEBUG();

                lastDriveVal=drive;

                if (triggerEvent > 0 && AudioFX1module==true) sendAudioFX1(); // if AudioFX1Module is installed, send every event
                if (ServoFX1module==true && triggerEvent > 0) sendServoFX1(); // if ServoFX1Module is installed, send every event

            } // end DisableAtStart      
        } 
        else {
            //      Serial.println("Something wrong with Xbee Read Packets");
            rxErrorCount++;
        }  
    }
    if (!safeMode) {
        Serial.print("SAFE MODE");
        triggerEvent=125;
        sendAudioFX1();  
        safeMode=true;

        chan1servo.write(turnCenter);      // Update Channel 1 servo 
        chan2servo.write(driveCenter);      // Update Channel 2 servo
        chan3servo.write(domeCenter);      // Update Channel 3 servo     
    }

    if (xbee.readPacket(1000)) {
        //    Serial.println("Trying to establishing connection.");
        rxErrorCount = 0;    
    } 
    else {
        Serial.print("Waiting for Transmitter Response. Errors = ");
        rxErrorCount++;
        Serial.println(rxErrorCount);
        xbee.send(zbTx);
    }

    //  if (rxErrorCount >  rebootThreshhold) { 
    //    Serial.println("System needs a restart");  // NOTE, can be done with RESET Pin!
    //    xbee.send(zbTx);
    //    triggerEvent=3;
    //    sendAudioFX1();
    //  }

}


/*******************************************************************************************************/
/* Extra Functions()                                                                                              */
/*******************************************************************************************************/

void r2Wiggle() {
    sendAudioFX1();
    triggerEvent=0;
    chan1servo.write(85);
    delay(180);
    chan1servo.write(95);
    delay(180);
    chan1servo.write(85);
    delay(180);
    chan1servo.write(95);
    delay(180);
    chan1servo.write(85);
    delay(180);
    chan1servo.write(95);
    delay(180);
    chan1servo.write(85);
    delay(180);
    chan1servo.write(95);
    delay(180);        
}

void sendTelemetry() {
    getVCC();
    getVCA();
    getRSSI();

    payload[0] = txVCC;
    payload[1] = txVCA;
    payload[2] = txRSSI;
    payload[3] = telemetryflags1;
    payload[4] = telemetryflags2;
    payload[5] = telemetryflags3;
    payload[6] = telemetryflags4;

    xbee.send(zbTx); 
    //  Serial.println(payload[4]);
}

void getVCC() {

    int VCCvalue = analogRead(analogVCCinput);
    float vout = 0.0;                      // For voltage out measured analog input
    float vcc = 0.0;                      // Voltage calculated, since the divider allows for 15 volts

    vout= (VCCvalue * 5.0)/1024.0;                // Voltage coming out of the voltage divider
    vcc = vout / (R2/(R1+R2));                  // Voltage based on vout to display battery status
    txVCC = (vcc)*10;

    //Serial.print("Battery Voltage: "); Serial.println(txVCC);  
}

void getVCA() {
    txVCA = random(0,255);
}  

void sendAudioFX1() {
    Wire.beginTransmission(4);  // transmit to device #4 which is the Audio FX#1 rMP3
    Wire.write(triggerEvent);   // sends Trigger Event LSB 
    Wire.endTransmission();     // stop transmitting
}

void sendAudioFX2() {
    Wire.beginTransmission(5);  // transmit to device #5 which is the Audio FX#2 Module rMP3
    Wire.write(triggerFX2item); // sends Trigger Event LSB 
    Wire.endTransmission();     // stop transmitting
}

void sendServoFX1() {
    Wire.beginTransmission(6);  // transmit to device #6 which is the Servo FX#1 Module rMP3
    Wire.write(triggerEvent);   // sends Trigger Event LSB 
    Wire.endTransmission();     // stop transmitting
}

void printDEBUG(){
    Serial.print("turn = ");
    Serial.print(turn);
    Serial.print("\tdrive = ");
    Serial.print(drive);
    Serial.print("\tdome = ");
    Serial.print(dome);
    Serial.print("\tDome_Lock = ");
    Serial.println(Dome_Lock);
}

int valueDiff(int dval1, int dval2) {
    if (dval1 > dval2)
        return (dval1-dval2);
    else
        return (dval2-dval1);
}

byte setFlag(boolean flagName, byte flag, int flagNumber) {
    if (flagName) bitSet (flag, flagNumber);
    else bitClear (flag, flagNumber);
    return flag;
}

void getRSSI() {

    atRequest.setCommand(dbCmd);  
    xbee.send(atRequest);
    if (xbee.readPacket(5000)) {
        xbee.getResponse().getAtCommandResponse(atResponse);      
        if (atResponse.isOk()) {
            if (atResponse.getValueLength() > 0) {
                txRSSI = atResponse.getValue()[0];
                //Serial.print("RSSI Value: ");
                //Serial.println(txRSSI);
            } 
            else {
                //Serial.print("Response empty");
            }
        } 
        else {
            //Serial.print("Command failed");
        }
    }

}
